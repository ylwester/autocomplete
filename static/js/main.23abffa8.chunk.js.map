{"version":3,"sources":["Autocomplete.js","redux/usersSlice.js","App.js","redux/store.js","index.js"],"names":["Autocomplete","data","useState","userInput","setUserInput","suggestions","setSuggestions","currentSelection","setCurrentSelection","currentIndex","useRef","displaySuggestion","setDisplaySuggestion","useEffect","current","setIndex","length","className","onKeyDown","event","keyCode","value","onChange","e","suggested","filter","suggest","toLowerCase","startsWith","target","onBlur","map","suggestion","onMouseDown","id","indexOf","slice","userSlice","createSlice","name","initialState","users","reducers","setUsers","state","action","payload","actions","App","usersArray","dispatch","useDispatch","useSelector","axios","get","then","response","catch","err","console","log","user","username","configureStore","reducer","userReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"uSA2HeA,EAxHM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgDJ,qBAAhD,mBAAOK,EAAP,KAAyBC,EAAzB,KACMC,EAAeC,kBAAQ,GAC7B,EAAkDR,oBAAS,GAA3D,mBAAOS,EAAP,KAA0BC,EAA1B,KAEAC,qBAAU,WAEJV,GAA2B,KAAdA,EACfS,GAAqB,IAKvBN,EAAe,IACfG,EAAaK,SAAW,EACxBN,OAUC,CAACL,EAAWS,IAGf,IAAMG,EAAW,WACXN,EAAaK,SAAWT,EAAYW,SAAQP,EAAaK,QAAU,GACnEL,EAAaK,QAAU,IAAGL,EAAaK,QAAUT,EAAYW,OAAS,GAE1ER,EAAoBH,EAAYI,EAAaK,WAuD/C,OACE,sBAAKG,UAAU,kBAAf,UACE,uBACEC,UA1CgB,SAACC,GAcrB,GAZsB,KAAlBA,EAAMC,UACRX,EAAaK,UACbC,KAIoB,KAAlBI,EAAMC,UACRX,EAAaK,UACbC,KAIoB,KAAlBI,EAAMC,QAAgB,CACxB,IAAKb,EAAkB,OACvBH,EAAaG,GACbC,IACAC,EAAaK,SAAW,EACxBR,EAAe,IACfM,GAAqB,KAuBnBS,MAAOlB,EACPmB,SAzDe,SAACC,GAEpBf,IACAC,EAAaK,SAAW,EAGxB,IAAIU,EAAYvB,EAAKwB,QAAO,SAACC,GAAD,OAC1BA,EAAQC,cAAcC,WAAWL,EAAEM,OAAOR,MAAMM,kBAElDrB,EAAekB,GACfpB,EAAamB,EAAEM,OAAOR,QAgDlBS,OApBa,WACjBlB,GAAqB,GACrBJ,IACAC,EAAaK,SAAW,KAmBE,IAAvBT,EAAYW,QAAgBL,EAC3B,qBAAKM,UAAU,kBAAf,SACGZ,EAAY0B,KAAI,SAACC,GAAD,OACf,sBACEC,YAAa,kBAlBvB7B,EAkByC4B,GAjBzCxB,IACAF,EAAe,SACfM,GAAqB,IAgBXsB,GAAI7B,EAAY8B,QAAQH,GAExBf,UACER,EAAaK,UAAYT,EAAY8B,QAAQH,GACzC,sBACA,aAPR,UAUE,iCAASA,EAAWI,MAAM,EAAGjC,EAAUa,UACtCgB,EAAWI,MAAMjC,EAAUa,UARvBX,EAAY8B,QAAQH,SAY7B,S,OCpHGK,EAAYC,YAAY,CACjCC,KAAM,QACNC,aAAc,CACVC,MAAO,IAEXC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMH,MAAQI,EAAOC,YAKlBH,EAAaN,EAAUU,QAAvBJ,SAEAN,IAAf,QCqBeW,MA9Bf,WACE,IAI0BC,EAJpBC,EAAWC,cACVV,EAASW,aAAY,SAACR,GAAD,OAAUA,EAAMH,SAArCA,MAqBP,OAZA5B,qBAAU,WAENwC,IAAMC,IAJE,8CAKPC,MAAK,SAAAC,GAAQ,OAAIN,EAASP,EAASa,EAASvD,UAC5CwD,OAAM,SAAUC,GACfC,QAAQC,IAAI,sBAAwBF,QAKvC,CAACR,IAGF,qBAAKjC,UAAU,MAAf,SACE,cAAC,EAAD,CAAchB,MApBQgD,EAoBeR,EAnBhCQ,EAAWlB,KAAI,SAAU8B,GAAO,OAAOA,EAAKC,kBCVxCC,cAAe,CAC5BC,QAAS,CACPvB,MAAOwB,KCEXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.23abffa8.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"./styles/Autocomplete.css\";\n\nconst Autocomplete = ({ data }) => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [currentSelection, setCurrentSelection] = useState();\n  const currentIndex = useRef(-1);\n  const [displaySuggestion, setDisplaySuggestion] = useState(false);\n\n  useEffect(() => {\n    //Display suggestions only when userinput is not empty\n    if (userInput && userInput !== \"\") {\n      setDisplaySuggestion(true);\n      return;\n    }\n\n    //When userinput is empty or undefined, clear states\n    setSuggestions([]);\n    currentIndex.current = -1;\n    setCurrentSelection();\n\n    // if (!userInput) {\n    //   setDisplaySuggestion(false);\n    //   currentIndex.current = -1;\n    //   setCurrentSelection();\n    // }\n    // if(userInput === \"\"){\n    //   setSuggestions([]);\n    // }\n  }, [userInput, setDisplaySuggestion]);\n\n  //Set index and selected item after buttons up/down.\n  const setIndex = () => {\n    if (currentIndex.current >= suggestions.length) currentIndex.current = 0;\n    if (currentIndex.current < 0) currentIndex.current = suggestions.length - 1;\n\n    setCurrentSelection(suggestions[currentIndex.current]);\n  };\n\n  const handleChange = (e) => {\n    //Clear selection and reset index after every letter inputted\n    setCurrentSelection();\n    currentIndex.current = -1;\n\n    //Get matched suggestion after users' input\n    let suggested = data.filter((suggest) =>\n      suggest.toLowerCase().startsWith(e.target.value.toLowerCase())\n    );\n    setSuggestions(suggested);\n    setUserInput(e.target.value);\n  };\n\n  const handleKeyDown = (event) => {\n    //Button down\n    if (event.keyCode === 40) {\n      currentIndex.current++;\n      setIndex();\n    }\n\n    //Button up\n    if (event.keyCode === 38) {\n      currentIndex.current--;\n      setIndex();\n    }\n\n    //Enter\n    if (event.keyCode === 13) {\n      if (!currentSelection) return;\n      setUserInput(currentSelection);\n      setCurrentSelection();\n      currentIndex.current = -1;\n      setSuggestions([]);\n      setDisplaySuggestion(false);\n    }\n  };\n\n  //Close suggestion list after lost focus and cleared index/selected item.\n  const handleBlur = () => {\n    setDisplaySuggestion(false);\n    setCurrentSelection();\n    currentIndex.current = -1;\n  };\n\n  //Pick suggestion after mouse click\n  const handleClick = (sugg) => {\n    setUserInput(sugg);\n    setCurrentSelection();\n    setSuggestions([]);\n    setDisplaySuggestion(false);\n  };\n\n  return (\n    <div className=\"input-container\">\n      <input\n        onKeyDown={handleKeyDown}\n        value={userInput}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      {suggestions.length !== 0 && displaySuggestion ? (\n        <div className=\"suggestion-list\">\n          {suggestions.map((suggestion) => (\n            <div\n              onMouseDown={() => handleClick(suggestion)}\n              id={suggestions.indexOf(suggestion)}\n              key={suggestions.indexOf(suggestion)}\n              className={\n                currentIndex.current === suggestions.indexOf(suggestion)\n                  ? \"suggestion selected\"\n                  : \"suggestion\"\n              }\n            >\n              <strong>{suggestion.slice(0, userInput.length)}</strong>\n              {suggestion.slice(userInput.length)}\n            </div>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n    name: 'users',\n    initialState: {\n        users: []\n    },\n    reducers: {\n        setUsers: (state, action) => {\n            state.users = action.payload;\n        }\n    }\n})\n\nexport const { setUsers } = userSlice.actions;\n\nexport default userSlice.reducer","import axios from 'axios';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Autocomplete from './Autocomplete'\nimport { setUsers } from './redux/usersSlice';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const {users} = useSelector((state)=> state.users)\n\n  //Get only usernames from users array\n  const extractUserNames = (usersArray) => {\n    return usersArray.map(function (user) {return user.username;});\n  }\n\n  const uri = \"https://jsonplaceholder.typicode.com/users\";\n\n  useEffect(() => {\n    const fetchUsers = () => {\n      axios.get(uri)\n      .then(response => dispatch(setUsers(response.data)))\n      .catch(function (err) {\n        console.log(\"Couldnt get users: \" + err)\n      })\n    }\n\n    fetchUsers();\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <Autocomplete data={extractUserNames(users)} />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport userReducer from './usersSlice';\n\nexport default configureStore({\n  reducer: {\n    users: userReducer,\n  }\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}